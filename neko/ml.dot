digraph ml {
    ndDisplay[label="{&lt;&lt;&lt;Structure&gt;&gt;&gt;\nDisplay|- size: pty::Winszed\n- coord_neko: (usize, usize)\n- coord_bulle: (usize, usize)\n- draw: graphic::Draw\n- count: usize\n- nl: (usize, usize)\n- persona: Persona\n- tooltip: Tooltip\n- padding: usize\n- cursor: usize|+ from_window_size(size: &amp;pty::Winszed) -&gt; Self\n+ get_persona(&amp;self) -&gt; &amp;Persona\n+ get_tooltip(&amp;self) -&gt; &amp;Tooltip\n+ set_window_size(&amp;mut self, size: &amp;pty::Winszed)\n+ set_draw(&amp;mut self, sprite: &amp;graphic::Sprite)\n+ set_state(&amp;mut self, lib: &amp;LibraryState, dictionary: &amp;mut graphic::Graphic)\n- get_coordinates(&amp;self) -&gt; ((usize, usize), (usize, usize))| next(&amp;mut Self) -&gt; Option&lt;pty::Character&gt;}"][shape="record"];
    ndCompositerError[label="{&lt;&lt;&lt;Enumeration&gt;&gt;&gt;\nCompositerError|MvFail(io::Error)\nRmFile(io::Error)\nRmDir(io::Error)\nMkDirGit(io::Error)\nMkDirLib(io::Error)\nReadDirGit(io::Error)\nReadDirLib(io::Error)\nOpenDirLib(io::Error)\nBuildCommand(io::Error)\nReadManifest(io::Error)\nInstallClone(git2::Error)\nUpdateRepOpen(git2::Error)\nUpdateRepOrigin(git2::Error)\nUpdateRepFetch(git2::Error)\nUpdateRepBranch(git2::Error)\nUpdateRepObject(git2::Error)\nUpdateRepReset(git2::Error)\nMount(LibraryError)\nBuildExit(process::ExitStatus)\nUpdateRepBranchId\nNekoPath\nUnmountPosition\nUnmountRemove\nParseManifest\nParseInteger\nInstallFormat\nInstallExists\nIo(io::Error)|| fmt(&amp;Self, &amp;mut fmt::Formatter) -&gt; fmt::Result\n description(&amp;Self) -&gt; &amp;str\n cause(&amp;Self) -&gt; Option&lt;&amp;Error&gt;\n from(env::VarError) -&gt; CompositerError\n from(io::Error) -&gt; CompositerError\n eq(&amp;Self, &amp;CompositerError) -&gt; bool}"][shape="record"];
    ndLibraryError[label="{&lt;&lt;&lt;Enumeration&gt;&gt;&gt;\nLibraryError|EmptyEvent\nBadGet(io::Error)\nBadDyLib(String)|| fmt(&amp;Self, &amp;mut fmt::Formatter) -&gt; fmt::Result\n description(&amp;Self) -&gt; &amp;str\n cause(&amp;Self) -&gt; Option&lt;&amp;Error&gt;}"][shape="record"];
    ndLibrary[label="{&lt;&lt;&lt;Structure&gt;&gt;&gt;\nLibrary|- install: Option&lt;extern &quot;C&quot; fn(state: *const LibraryState,\n                     save: &amp;*const *const libc::c_void)&gt;\n- uninstall: Option&lt;extern &quot;C&quot; fn(state: *const LibraryState,\n                     save: &amp;*const *const libc::c_void)&gt;\n- start: Option&lt;extern &quot;C&quot; fn(state: *const LibraryState,\n                     save: &amp;*const *const libc::c_void)&gt;\n- end: Option&lt;extern &quot;C&quot; fn(state: *const LibraryState,\n                     save: &amp;*const *const libc::c_void)&gt;\n- idle: Option&lt;extern &quot;C&quot; fn(state: *const LibraryState,\n                     save: &amp;*const *const libc::c_void)&gt;\n- process: Option&lt;extern &quot;C&quot; fn(state: *const LibraryState,\n                     save: &amp;*const *const libc::c_void,\n                     name: *const libc::c_uchar, pid: libc::c_int)&gt;\n- command: Option&lt;extern &quot;C&quot; fn(state: *const LibraryState,\n                     save: &amp;*const *const libc::c_void,\n                     line: *const libc::c_uchar)&gt;\n- key_unicode_down: Option&lt;extern &quot;C&quot; fn(state: *const LibraryState,\n                     save: &amp;*const *const libc::c_void,\n                     code: libc::c_ulonglong)&gt;\n- key_string_down: Option&lt;extern &quot;C&quot; fn(state: *const LibraryState,\n                     save: &amp;*const *const libc::c_void,\n                     text: *const libc::c_uchar)&gt;\n- key_repeat_down: Option&lt;extern &quot;C&quot; fn(state: *const LibraryState,\n                     save: &amp;*const *const libc::c_void,\n                     repeat: libc::c_ulong)&gt;\n- key_interval_down: Option&lt;extern &quot;C&quot; fn(state: *const LibraryState,\n                     save: &amp;*const *const libc::c_void,\n                     interval: libc::c_longlong)&gt;\n- mouse_pressed: Option&lt;extern &quot;C&quot; fn(state: *const LibraryState,\n                     save: &amp;*const *const libc::c_void, code: libc::c_uint,\n                     xy: [libc::c_ushort; 2])&gt;\n- mouse_released: Option&lt;extern &quot;C&quot; fn(state: *const LibraryState,\n                     save: &amp;*const *const libc::c_void, code: libc::c_uint,\n                     xy: [libc::c_ushort; 2])&gt;\n- input: Option&lt;extern &quot;C&quot; fn(state: *const LibraryState,\n                     save: &amp;*const *const libc::c_void,\n                     text: *const libc::c_uchar)&gt;\n- output: Option&lt;extern &quot;C&quot; fn(state: *const LibraryState,\n                     save: &amp;*const *const libc::c_void,\n                     text: *const libc::c_uchar)&gt;\n- resized: Option&lt;extern &quot;C&quot; fn(state: *const LibraryState,\n                     save: &amp;*const *const libc::c_void,\n                     text: *const pty::Winszed)&gt;\n- save: *const *const libc::c_void\n- handle: *mut libc::c_void\n- index: i64\n- path: PathBuf\n- unmounted: bool|+ new(path: PathBuf, index: i64, state: &amp;LibraryState) -&gt; Result&lt;Self&gt;\n+ as_path_buf(&amp;self) -&gt; &amp;PathBuf\n+ get_priority(&amp;self) -&gt; i64\n+ is_unmounted(&amp;self) -&gt; bool\n+ install(&amp;self, state: &amp;LibraryState)\n+ uninstall(&amp;self, state: &amp;LibraryState)\n+ start(&amp;self, state: &amp;LibraryState)\n+ end(&amp;self, state: &amp;LibraryState)\n+ idle(&amp;self, state: &amp;LibraryState)\n+ process(&amp;self, state: &amp;LibraryState, taskname: &amp;[libc::c_uchar], pid: libc::c_int)\n+ command(&amp;self, state: &amp;LibraryState, line: &amp;[libc::c_uchar])\n+ key_unicode_down(&amp;self, state: &amp;LibraryState, code: libc::c_ulonglong)\n+ key_string_down(&amp;self, state: &amp;LibraryState, text: &amp;[libc::c_uchar])\n+ key_repeat_down(&amp;self, state: &amp;LibraryState, repeat: libc::c_ulong)\n+ key_interval_down(&amp;self, state: &amp;LibraryState, interval: libc::c_longlong)\n+ mouse_pressed(&amp;self, state: &amp;LibraryState, code: libc::c_uint, xy: [libc::c_ushort; 2])\n+ mouse_released(&amp;self, state: &amp;LibraryState, code: libc::c_uint, xy: [libc::c_ushort; 2])\n+ input(&amp;self, state: &amp;LibraryState, text: &amp;[libc::c_uchar])\n+ output(&amp;self, state: &amp;LibraryState, text: &amp;[libc::c_uchar])\n+ resized(&amp;self, state: &amp;LibraryState, size: &amp;pty::Winszed)\n+ call(&amp;self, state: &amp;LibraryState, event: &amp;pty::ShellState)|\n eq(&amp;Self, &amp;Library) -&gt; bool\n partial_cmp(&amp;Self, &amp;Library) -&gt; Option&lt;Ordering&gt;\n cmp(&amp;Self, &amp;Library) -&gt; Ordering\n fmt(&amp;Self, &amp;mut fmt::Formatter) -&gt; fmt::Result\n drop(&amp;mut Self)}"][shape="record"];
    ndLibraryState[label="{&lt;&lt;&lt;Structure&gt;&gt;&gt;\nLibraryState|- persona: Persona\n- tooltip: Tooltip\n- unmount: libc::c_uchar\n- lock: libc::c_uchar|+ is_unmounted(&amp;self) -&gt; bool\n+ is_locked(&amp;self) -&gt; bool\n+ get_sheet(&amp;self) -&gt; &amp;graphic::Sheet\n+ get_tooltip(&amp;self) -&gt; &amp;Tooltip\n+ get_persona(&amp;self) -&gt; &amp;Persona\n+ get_position(&amp;self) -&gt; &amp;Position\n+ get_emotion(&amp;self) -&gt; &amp;[[graphic::Tuple; graphic::SPEC_MAX_XY]; graphic::SPEC_MAX_DRAW]\n+ set_tooltip_message(&amp;mut self, message: String)\n+ set_tooltip_cardinal(&amp;mut self, cardinal: Relative)\n+ set_persona_sheet(&amp;mut self, sheet: graphic::Sheet)\n+ set_persona_position(&amp;mut self, position: Position)| clone(&amp;Self) -&gt; Self\n fmt(&amp;Self, &amp;mut fmt::Formatter) -&gt; fmt::Result\n default() -&gt; Self}"][shape="record"];
    ndCardinal[label="{&lt;&lt;&lt;Enumeration&gt;&gt;&gt;\nCardinal|UpperLeft\nUpperMiddle\nUpperRight\nMiddleLeft\nMiddleCentral\nMiddleRight\nLowerLeft\nLowerMiddle\nLowerRight|+ get_coordinate(&amp;self, size: &amp;pty::Winszed) -&gt; (usize, usize)| default() -&gt; Cardinal}"][shape="record"];
    ndPersona[label="{&lt;&lt;&lt;Structure&gt;&gt;&gt;\nPersona|- sheet: graphic::Sheet\n- emotion: [[graphic::Tuple; graphic::SPEC_MAX_XY]; graphic::SPEC_MAX_DRAW]\n- position: Position|+ get_sheet(&amp;self) -&gt; &amp;graphic::Sheet\n+ get_position(&amp;self) -&gt; &amp;Position\n+ get_emotion(&amp;self) -&gt; &amp;[[graphic::Tuple; graphic::SPEC_MAX_XY]; graphic::SPEC_MAX_DRAW]\n+ set_sheet(&amp;mut self, sheet: graphic::Sheet)\n+ set_position(&amp;mut self, position: Position)\n+ set_emotion(&amp;mut self, emotion: [[graphic::Tuple; graphic::SPEC_MAX_XY]; graphic::SPEC_MAX_DRAW])| eq(&amp;Self, &amp;Persona) -&gt; bool\n clone(&amp;Self) -&gt; Self\n fmt(&amp;Self, &amp;mut std::fmt::Formatter) -&gt; std::fmt::Result\n fmt(&amp;Self, &amp;mut std::fmt::Formatter) -&gt; std::fmt::Result\n default() -&gt; Self}"][shape="record"];
    ndPosition[label="{&lt;&lt;&lt;Structure&gt;&gt;&gt;\nPosition|- cardinal: Cardinal\n- cartesian: [libc::c_ushort; 2]|+ get_coordinate(&amp;self, size: &amp;pty::Winszed) -&gt; (usize, usize)\n+ set_cardinal(&amp;mut self, cardinal: Cardinal)| fmt(&amp;Self, &amp;mut fmt::Formatter) -&gt; fmt::Result\n from(Cardinal) -&gt; Position\n from([libc::c_ushort; 2]) -&gt; Position\n default() -&gt; Position}"][shape="record"];
    ndRelative[label="{&lt;&lt;&lt;Enumeration&gt;&gt;&gt;\nRelative|Top\nBottom\nRight\nLeft|| default() -&gt; Self}"][shape="record"];
    ndTooltip[label="{&lt;&lt;&lt;Structure&gt;&gt;&gt;\nTooltip|- cardinal: Relative\n- message: [pty::Character; 1024]|+ get_height(&amp;self) -&gt; usize\n+ get_width(&amp;self) -&gt; usize\n+ get_cardinal(&amp;self) -&gt; &amp;Relative\n+ get_message(&amp;self) -&gt; &amp;[pty::Character; 1024]\n+ set_message(&amp;mut self, message: String)\n+ set_cardinal(&amp;mut self, cardinal: Relative)| index(&amp;Self, usize) -&gt; &amp;pty::Character\n index(&amp;Self, RangeTo&lt;usize&gt;) -&gt; &amp;[pty::Character]\n eq(&amp;Self, &amp;Tooltip) -&gt; bool\n fmt(&amp;Self, &amp;mut fmt::Formatter) -&gt; fmt::Result\n fmt(&amp;Self, &amp;mut fmt::Formatter) -&gt; fmt::Result\n clone(&amp;Self) -&gt; Self\n default() -&gt; Self}"][shape="record"];
    ndCompositer[label="{&lt;&lt;&lt;Structure&gt;&gt;&gt;\nCompositer|- state: LibraryState\n- list: Vec&lt;Library&gt;|+ new() -&gt; Result&lt;Self&gt;\n+ get_git(&amp;self) -&gt; Result&lt;PathBuf&gt;\n+ get_lib(&amp;self) -&gt; Result&lt;PathBuf&gt;\n+ git_with_lib(&amp;mut self) -&gt; Result&lt;(PathBuf, PathBuf)&gt;\n+ get_manifest(&amp;self, repository: &amp;PathBuf) -&gt; Result&lt;toml::Table&gt;\n+ mount(&amp;mut self, libraryname: &amp;S, priority: Option&lt;i64&gt;) -&gt; Result&lt;()&gt;\n+ unmount(&amp;mut self, libraryname: S) -&gt; Result&lt;()&gt;\n+ build(&amp;mut self, source: &amp;PathBuf, sub: S) -&gt; Result&lt;()&gt;\n- dependency_from_git(&amp;mut self, table: &amp;toml::Table) -&gt; Result&lt;()&gt;\n+ dependency(&amp;mut self, source: &amp;PathBuf) -&gt; Result&lt;()&gt;\n+ install(&amp;mut self, repo: &amp;str) -&gt; Result&lt;()&gt;\n- reset(&amp;self, repo: &amp;git2::Repository, object: &amp;git2::Object) -&gt; Result&lt;()&gt;\n- update_from_master(&amp;self, repo: &amp;git2::Repository) -&gt; Result&lt;()&gt;\n+ update(&amp;mut self, libraryname: &amp;str) -&gt; Result&lt;()&gt;\n+ uninstall(&amp;mut self, libraryname: &amp;S) -&gt; Result&lt;()&gt;\n+ get_state(&amp;self) -&gt; &amp;LibraryState\n+ set_tooltip_message(&amp;mut self, text: String)\n+ set_tooltip_cardinal(&amp;mut self, sheet: Relative)\n+ set_persona_sheet(&amp;mut self, sheet: graphic::Sheet)\n+ set_persona_position(&amp;mut self, position: Position)\n+ resized(&amp;mut self, size: &amp;pty::Winszed)\n+ call(&amp;mut self, event: &amp;ShellState)| into_iter(Self) -&gt; Self::IntoIter\n default() -&gt; Compositer}"][shape="record"];
    ndNekoError[label="{&lt;&lt;&lt;Enumeration&gt;&gt;&gt;\nNekoError|Dynamic(CompositerError)\nGraphic(GraphicError)\nShell(ShellError)|| fmt(&amp;Self, &amp;mut fmt::Formatter) -&gt; fmt::Result\n description(&amp;Self) -&gt; &amp;str\n cause(&amp;Self) -&gt; Option&lt;&amp;Error&gt;\n from(CompositerError) -&gt; NekoError\n from(GraphicError) -&gt; NekoError\n from(ShellError) -&gt; NekoError}"][shape="record"];
    ndNeko[label="{&lt;&lt;&lt;Structure&gt;&gt;&gt;\nNeko|- dynamic: Compositer\n- screen: Display\n- shell: T\n- graphic: editeur::Graphic\n- pid: libc::pid_t\n- line: io::Cursor&lt;Vec&lt;char&gt;&gt;|+ new(repeat: Option&lt;i64&gt;, interval: Option&lt;i64&gt;, command: Option&lt;&amp;str&gt;, windows: Option&lt;pty::Winszed&gt;) -&gt; Result&lt;Neko&lt;pty::Shell&gt;&gt;\n+ from_shell(shell: T) -&gt; Result&lt;Neko&lt;T&gt;&gt;\n- call(&amp;mut self)\n+ from_graphic(graphic: editeur::Graphic, repeat: Option&lt;i64&gt;, interval: Option&lt;i64&gt;, command: Option&lt;&amp;str&gt;, windows: Option&lt;pty::Winszed&gt;) -&gt; Result&lt;Neko&lt;pty::Shell&gt;&gt;\n- neko(&amp;mut self, key: pty::Key, state: &amp;mut pty::ShellState)\n- line(&amp;mut self, key: pty::Key)\n+ get_screen(&amp;self) -&gt; (&amp;pty::Display, &amp;Display)| get_pid(&amp;Self) -&gt; libc::pid_t\n get_speudo(&amp;Self) -&gt; &amp;pty::Master\n get_screen(&amp;Self) -&gt; &amp;pty::Display\n get_window_size(&amp;Self) -&gt; &amp;pty::Winszed\n set_window_size(&amp;mut Self)\n set_window_size_with(&amp;mut Self, &amp;pty::Winszed)\n write(&amp;mut Self, &amp;[u8]) -&gt; io::Result&lt;usize&gt;\n next(&amp;mut Self, pty::DeviceState) -&gt; pty::ShellState\n next(&amp;mut Self) -&gt; Option&lt;pty::ShellState&gt;\n write(&amp;mut Self, &amp;[u8]) -&gt; io::Result&lt;usize&gt;\n flush(&amp;mut Self) -&gt; io::Result&lt;()&gt;\n fmt(&amp;Self, &amp;mut fmt::Formatter) -&gt; fmt::Result\n fmt(&amp;Self, &amp;mut fmt::Formatter) -&gt; fmt::Result\n drop(&amp;mut Self)}"][shape="record"];
    ndDisplay -> ndNeko[label=""][arrowhead="diamond"];
    ndCompositerError -> ndNekoError[label=""][arrowhead="diamond"];
    ndLibraryError -> ndCompositerError[label=""][arrowhead="diamond"];
    ndLibrary -> ndCompositer[label=""][arrowhead="diamond"];
    ndLibraryState -> ndDisplay[label=""][style="dashed"][arrowhead="vee"];
    ndLibraryState -> ndLibrary[label=""][style="dashed"][arrowhead="vee"];
    ndLibraryState -> ndCompositer[label=""][arrowhead="diamond"];
    ndCardinal -> ndPosition[label=""][style="dashed"][arrowhead="diamond"];
    ndPersona -> ndDisplay[label=""][arrowhead="diamond"];
    ndPersona -> ndLibraryState[label=""][arrowhead="diamond"];
    ndPosition -> ndLibraryState[label=""][style="dashed"][arrowhead="vee"];
    ndPosition -> ndPersona[label=""][style="dashed"][arrowhead="diamond"];
    ndPosition -> ndCompositer[label=""][style="dashed"][arrowhead="vee"];
    ndRelative -> ndLibraryState[label=""][style="dashed"][arrowhead="vee"];
    ndRelative -> ndTooltip[label=""][style="dashed"][arrowhead="diamond"];
    ndRelative -> ndCompositer[label=""][style="dashed"][arrowhead="vee"];
    ndTooltip -> ndDisplay[label=""][arrowhead="diamond"];
    ndTooltip -> ndLibraryState[label=""][arrowhead="diamond"];
    ndCompositer -> ndNeko[label=""][arrowhead="diamond"];
}
